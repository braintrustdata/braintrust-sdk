// Generated by sdk/scripts/build_btql_types.py. DO NOT EDIT.

export type AliasExpr = {
  expr: Expr;
  alias: string;
};

export type ArithmeticExpr = {
  op: ArithmeticOp;
  left: Expr;
  right: Expr;
  loc?: Loc | null;
};

export type ArrayLiteral = Array<LiteralValue>;

export type BooleanExpr = {
  op: BooleanOp;
  left?: Expr;
  right?: Expr;
  children?: Array<Expr>;
  loc?: Loc;
};

export type BooleanLiteral = boolean;

export type BtqlSnippet = {
  btql: string;
  op?: "btql" | null;
  loc?: Loc | null;
};

export type ComparisonExpr = {
  op: ComparisonOp;
  left: Expr;
  right: Expr;
  loc?: Loc;
};

export type CountSample = {
  type: "count";
  value: number;
};

export type DatetimeLiteral = string;

export type Expr =
  | Literal
  | IntervalLiteral
  | Ident
  | Star
  | FunctionExpr
  | ComparisonExpr
  | IncludesExpr
  | BooleanExpr
  | TernaryExpr
  | UnaryArithmeticExpr
  | UnaryExpr
  | ArithmeticExpr
  | BtqlSnippet;

export type FromFunction = FunctionExpr & {
  shape?: Shape | null;
};

export type FunctionExpr = {
  op: "function";
  name: Ident;
  args: Array<Expr>;
  loc?: Loc;
};

export type IdentPiece = number | string;

export type Ident = {
  op: "ident";
  name: Array<IdentPiece>;
  loc?: Loc;
};

export type IncludesExpr = {
  op: "includes";
  haystack: Expr;
  needle: Expr;
  loc?: Loc;
};

export type IntegerLiteral = number;

export type IntervalLiteral = {
  op: "interval";
  value: number;
  unit: IntervalUnit;
  loc?: Loc;
};

export type IntervalUnit =
  | "year"
  | "month"
  | "day"
  | "hour"
  | "minute"
  | "second"
  | "millisecond"
  | "microsecond";

export type Literal = {
  op: "literal";
  value: LiteralValue;
  loc?: Loc;
};

export type LiteralValue =
  | NullLiteral
  | BooleanLiteral
  | IntegerLiteral
  | NumberLiteral
  | StringLiteral
  | DatetimeLiteral
  | ArrayLiteral
  | ObjectLiteral;

export type Loc = {
  start: Pos;
  end: Pos;
};

export type NullLiteral = null;

export type NumberLiteral = number;

export type ObjectLiteral = {
  [key: string]: LiteralValue;
};

export type Pos = {
  line: number;
  col: number;
};

export type RateSample = {
  type: "rate";
  value: number;
};

export type Sample = {
  method: RateSample | CountSample;
  seed?: number | null;
};

export type Shape = "spans" | "traces" | "summary";

export type SortDirection = "asc" | "desc";

export type SortExpr = {
  expr: Expr;
  dir: SortDirection;
  loc?: Loc | null;
};

export type Star = {
  op: "star";
  replace?: {
    [key: string]: Expr;
  };
  loc?: Loc;
};

export type StringLiteral = string;

export type TernaryCond = {
  cond: Expr;
  then: Expr;
};

export type TernaryExpr = {
  op: "if";
  conds: Array<TernaryCond>;
  else: Expr;
  loc?: Loc;
};

export type UnaryArithmeticExpr = {
  op: UnaryArithmeticOp;
  expr: Expr;
  loc?: Loc;
};

export type UnaryExpr = {
  op: UnaryOp;
  expr: Expr;
  loc?: Loc;
};

export type UnpivotAliasExpr = {
  expr: Expr;
  alias: string | [string, string];
};

export type ArithmeticOp = "add" | "sub" | "mul" | "div" | "mod";

export type BooleanOp = "and" | "or";

export type ComparisonOp =
  | "eq"
  | "is"
  | "ne"
  | "lt"
  | "le"
  | "gt"
  | "ge"
  | "ilike"
  | "like"
  | "match"
  | "in";

export type UnaryArithmeticOp = "neg";

export type UnaryOp = "not" | "isnull" | "isnotnull";

export type ParsedQuery = {
  dimensions?: Array<AliasExpr> | null;
  pivot?: Array<AliasExpr> | null;
  unpivot?: Array<UnpivotAliasExpr> | null;
  measures?: Array<AliasExpr> | null;
  select?: Array<AliasExpr | Star> | null;
  infer?: Array<Ident | Star> | null;
  filter?: Expr | null;
  from?: Ident | FromFunction | null;
  sort?: Array<SortExpr> | null;
  limit?: number | null;
  cursor?: null | string;
  comparison_key?: Expr | null;
  weighted_scores?: Array<AliasExpr> | null;
  custom_columns?: Array<AliasExpr> | null;
  preview_length?: number | null;
  inference_budget?: number | null;
  sample?: Sample | null;
};
