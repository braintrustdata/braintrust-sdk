import argparse
import os
import sys
from dataclasses import dataclass
from typing import Any, Dict, List, Optional, Union

import globals
from dataclass_util import *
from format import *


def log(*args):
    print(*args, file=sys.stderr)


DEFAULT_DIR = os.path.join(os.path.dirname(__file__), "scratch-output")


@dataclass
class FooArgs:
    x_var: int = genfield(DocFmt("a companion to {}", "y_var"))
    y_var: Dict[str, bool] = genfield(DocFmt("an enemy of {}", "x_var"))
    z: Optional[Dict[int, int]] = genfield(
        DocFmt("A thingy comprising both {} and {}", "x_var", "y_var"),
        ts_custom_argspec=": Record<str, str> | undefined",
    )


@dataclass
class FooJSArgs:
    args: FooArgs


@dataclass
class BlingBling:
    thing: int = genfield(DocFmt("Beware"))
    other: int = genfield(DocFmt("Leprechauns!"))


FOO_DOCSTR_TOPLEVEL = DocFmt(
    """A function which does cool things.

Beware of evil leprechauns!!!
"""
)

FOO_DOCSTR_RETURN = DocFmt("A {} full of surprises", "BlingBling")

globals.set_lang("py")

LOGGER_PY = f"""
# This file has been autogenerated by the 'codegen' script defined in
# 'sdk/codegen'. Please edit the codegen file 'sdk/codegen/codegen.py' instead
# of this one.
from typing import List, Dict, Any, Optional, Union

def foo({dataclass_argspec(FooArgs)}) -> {typespec(BlingBling)}:
{full_docstring(FOO_DOCSTR_TOPLEVEL, FooArgs, FOO_DOCSTR_RETURN, num_tabs=1)}
    return BlingBling({ident('thing')}={ident('x_var')}, {ident('other')}=len({ident('y_var')}),)
"""

globals.set_lang("ts")

LOGGER_TS = f"""
// This file has been autogenerated by the 'codegen' script defined in
// 'sdk/codegen'. Please edit the codegen file 'sdk/codegen/codegen.py' instead
// of this one.

{full_docstring(FOO_DOCSTR_TOPLEVEL, FooJSArgs, FOO_DOCSTR_RETURN)}
function foo({dataclass_argspec(FooJSArgs)}): {typespec(BlingBling)} {{
    return {{ {ident('thing')}: {ident('args.x_var')}, {ident('other')}: Object.keys({ident('args.y_var')}).length, }};
}}
"""


def main():
    parser = argparse.ArgumentParser(
        prog="SDK code generator",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "--py_directory", default=os.path.join(DEFAULT_DIR, "py"), help="Directory to dump the generated python code"
    )
    parser.add_argument(
        "--ts_directory",
        default=os.path.join(DEFAULT_DIR, "ts"),
        help="Directory to dump the generated typescript code",
    )
    args = parser.parse_args()

    log(f"Writing python files to {args.py_directory}")
    os.makedirs(args.py_directory, exist_ok=True)
    with open(os.path.join(args.py_directory, "logger.py"), "w") as f:
        f.write(LOGGER_PY.strip())

    log(f"Writing typescript files to {args.ts_directory}")
    os.makedirs(args.ts_directory, exist_ok=True)
    with open(os.path.join(args.ts_directory, "logger.ts"), "w") as f:
        f.write(LOGGER_TS.strip())
